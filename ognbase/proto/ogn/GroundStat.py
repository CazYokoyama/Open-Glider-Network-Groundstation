# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ogn

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GroundStat(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 20

    # GroundStat
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GroundStat
    def Callsign(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # GroundStat
    def Timestamp(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # GroundStat
    def Lat(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # GroundStat
    def Lon(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # GroundStat
    def Alt(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateGroundStat(builder, callsign, timestamp, lat, lon, alt):
    builder.Prep(4, 20)
    builder.PrependInt32(alt)
    builder.PrependFloat32(lon)
    builder.PrependFloat32(lat)
    builder.PrependInt32(timestamp)
    builder.PrependInt32(callsign)
    return builder.Offset()
