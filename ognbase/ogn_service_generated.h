// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OGNSERVICE_OGN_H_
#define FLATBUFFERS_GENERATED_OGNSERVICE_OGN_H_

#include "flatbuffers/flatbuffers.h"

namespace ogn {

struct AircraftPos;

struct GroundPos;

struct GroundStat;

struct OneMessage;
struct OneMessageBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) AircraftPos FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t callsign_;
  int32_t timestamp_;
  int8_t type_;
  uint8_t stealth_;
  uint8_t notrack_;
  int8_t padding0__;
  int32_t heading_;
  int32_t speed_;
  int32_t lat_;
  int32_t lon_;
  int32_t alt_;

 public:
  AircraftPos()
      : callsign_(0),
        timestamp_(0),
        type_(0),
        stealth_(0),
        notrack_(0),
        padding0__(0),
        heading_(0),
        speed_(0),
        lat_(0),
        lon_(0),
        alt_(0) {
    (void)padding0__;
  }
  AircraftPos(int32_t _callsign, int32_t _timestamp, int8_t _type, bool _stealth, bool _notrack, int32_t _heading, int32_t _speed, int32_t _lat, int32_t _lon, int32_t _alt)
      : callsign_(flatbuffers::EndianScalar(_callsign)),
        timestamp_(flatbuffers::EndianScalar(_timestamp)),
        type_(flatbuffers::EndianScalar(_type)),
        stealth_(flatbuffers::EndianScalar(static_cast<uint8_t>(_stealth))),
        notrack_(flatbuffers::EndianScalar(static_cast<uint8_t>(_notrack))),
        padding0__(0),
        heading_(flatbuffers::EndianScalar(_heading)),
        speed_(flatbuffers::EndianScalar(_speed)),
        lat_(flatbuffers::EndianScalar(_lat)),
        lon_(flatbuffers::EndianScalar(_lon)),
        alt_(flatbuffers::EndianScalar(_alt)) {
    (void)padding0__;
  }
  int32_t callsign() const {
    return flatbuffers::EndianScalar(callsign_);
  }
  int32_t timestamp() const {
    return flatbuffers::EndianScalar(timestamp_);
  }
  int8_t type() const {
    return flatbuffers::EndianScalar(type_);
  }
  bool stealth() const {
    return flatbuffers::EndianScalar(stealth_) != 0;
  }
  bool notrack() const {
    return flatbuffers::EndianScalar(notrack_) != 0;
  }
  int32_t heading() const {
    return flatbuffers::EndianScalar(heading_);
  }
  int32_t speed() const {
    return flatbuffers::EndianScalar(speed_);
  }
  int32_t lat() const {
    return flatbuffers::EndianScalar(lat_);
  }
  int32_t lon() const {
    return flatbuffers::EndianScalar(lon_);
  }
  int32_t alt() const {
    return flatbuffers::EndianScalar(alt_);
  }
};
FLATBUFFERS_STRUCT_END(AircraftPos, 32);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GroundPos FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t callsign_;
  int32_t timestamp_;
  int32_t lat_;
  int32_t lon_;
  int32_t alt_;

 public:
  GroundPos()
      : callsign_(0),
        timestamp_(0),
        lat_(0),
        lon_(0),
        alt_(0) {
  }
  GroundPos(int32_t _callsign, int32_t _timestamp, int32_t _lat, int32_t _lon, int32_t _alt)
      : callsign_(flatbuffers::EndianScalar(_callsign)),
        timestamp_(flatbuffers::EndianScalar(_timestamp)),
        lat_(flatbuffers::EndianScalar(_lat)),
        lon_(flatbuffers::EndianScalar(_lon)),
        alt_(flatbuffers::EndianScalar(_alt)) {
  }
  int32_t callsign() const {
    return flatbuffers::EndianScalar(callsign_);
  }
  int32_t timestamp() const {
    return flatbuffers::EndianScalar(timestamp_);
  }
  int32_t lat() const {
    return flatbuffers::EndianScalar(lat_);
  }
  int32_t lon() const {
    return flatbuffers::EndianScalar(lon_);
  }
  int32_t alt() const {
    return flatbuffers::EndianScalar(alt_);
  }
};
FLATBUFFERS_STRUCT_END(GroundPos, 20);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) GroundStat FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t callsign_;
  int32_t timestamp_;
  int32_t lat_;
  int32_t lon_;
  int32_t alt_;

 public:
  GroundStat()
      : callsign_(0),
        timestamp_(0),
        lat_(0),
        lon_(0),
        alt_(0) {
  }
  GroundStat(int32_t _callsign, int32_t _timestamp, int32_t _lat, int32_t _lon, int32_t _alt)
      : callsign_(flatbuffers::EndianScalar(_callsign)),
        timestamp_(flatbuffers::EndianScalar(_timestamp)),
        lat_(flatbuffers::EndianScalar(_lat)),
        lon_(flatbuffers::EndianScalar(_lon)),
        alt_(flatbuffers::EndianScalar(_alt)) {
  }
  int32_t callsign() const {
    return flatbuffers::EndianScalar(callsign_);
  }
  int32_t timestamp() const {
    return flatbuffers::EndianScalar(timestamp_);
  }
  int32_t lat() const {
    return flatbuffers::EndianScalar(lat_);
  }
  int32_t lon() const {
    return flatbuffers::EndianScalar(lon_);
  }
  int32_t alt() const {
    return flatbuffers::EndianScalar(alt_);
  }
};
FLATBUFFERS_STRUCT_END(GroundStat, 20);

struct OneMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OneMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AIRC_POS = 4,
    VT_GROU_POS = 6,
    VT_GROU_STA = 8
  };
  const ogn::AircraftPos *airc_pos() const {
    return GetStruct<const ogn::AircraftPos *>(VT_AIRC_POS);
  }
  const ogn::GroundPos *grou_pos() const {
    return GetStruct<const ogn::GroundPos *>(VT_GROU_POS);
  }
  const ogn::GroundStat *grou_sta() const {
    return GetStruct<const ogn::GroundStat *>(VT_GROU_STA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<ogn::AircraftPos>(verifier, VT_AIRC_POS) &&
           VerifyField<ogn::GroundPos>(verifier, VT_GROU_POS) &&
           VerifyField<ogn::GroundStat>(verifier, VT_GROU_STA) &&
           verifier.EndTable();
  }
};

struct OneMessageBuilder {
  typedef OneMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_airc_pos(const ogn::AircraftPos *airc_pos) {
    fbb_.AddStruct(OneMessage::VT_AIRC_POS, airc_pos);
  }
  void add_grou_pos(const ogn::GroundPos *grou_pos) {
    fbb_.AddStruct(OneMessage::VT_GROU_POS, grou_pos);
  }
  void add_grou_sta(const ogn::GroundStat *grou_sta) {
    fbb_.AddStruct(OneMessage::VT_GROU_STA, grou_sta);
  }
  explicit OneMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OneMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OneMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<OneMessage> CreateOneMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    const ogn::AircraftPos *airc_pos = nullptr,
    const ogn::GroundPos *grou_pos = nullptr,
    const ogn::GroundStat *grou_sta = nullptr) {
  OneMessageBuilder builder_(_fbb);
  builder_.add_grou_sta(grou_sta);
  builder_.add_grou_pos(grou_pos);
  builder_.add_airc_pos(airc_pos);
  return builder_.Finish();
}

inline const ogn::OneMessage *GetOneMessage(const void *buf) {
  return flatbuffers::GetRoot<ogn::OneMessage>(buf);
}

inline const ogn::OneMessage *GetSizePrefixedOneMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ogn::OneMessage>(buf);
}

inline bool VerifyOneMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ogn::OneMessage>(nullptr);
}

inline bool VerifySizePrefixedOneMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ogn::OneMessage>(nullptr);
}

inline void FinishOneMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ogn::OneMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOneMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ogn::OneMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ogn

#endif  // FLATBUFFERS_GENERATED_OGNSERVICE_OGN_H_
